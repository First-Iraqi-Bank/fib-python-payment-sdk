name: Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: "New version type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.email "${{ vars.FIB_BOT_MAIL }}"
          git config --global user.name "${{ vars.FIB_BOT }}"
          git config --list

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools bumpversion

      - name: Bump version
        id: bump_version
        run: |
          # Read the current version from setup.py
          CURRENT_VERSION=$(python setup.py --version)
          VERSION_TYPE=${{ github.event.inputs.version_type }}
          IFS='.' read -r -a version_parts <<< "$CURRENT_VERSION"
          major=${version_parts[0]}
          minor=${version_parts[1]}
          patch=${version_parts[2]}
          if [[ "$VERSION_TYPE" == "patch" ]]; then
            patch=$((patch + 1))
          elif [[ "$VERSION_TYPE" == "minor" ]]; then
            minor=$((minor + 1))
            patch=0
          elif [[ "$VERSION_TYPE" == "major" ]]; then
            major=$((major + 1))
            minor=0
            patch=0
          else
            echo "Unsupported version type specified."
            exit 1
          fi
          NEW_VERSION="$major.$minor.$patch"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Update setup.py
        run: |
          sed -i '' "s/version='[^']*'/version='${{ env.NEW_VERSION }}'/" setup.py  # Use empty string for macOS compatibility
          git add setup.py
          git commit -m "Bump version to ${{ env.NEW_VERSION }}" || echo "No changes to commit"

      - name: Push changes and create tag
        run: |
          git push origin main
          git tag -a "v${{ env.NEW_VERSION }}" -m "Release ${{ env.NEW_VERSION }}"
          git push origin "v${{ env.NEW_VERSION }}"
