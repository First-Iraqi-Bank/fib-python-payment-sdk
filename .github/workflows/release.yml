name: Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: "Version type to bump"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.email "${{ vars.FIB_BOT_MAIL }}"
          git config --global user.name "${{ vars.FIB_BOT }}"
          git config --list

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools twine wheel  # Ensure wheel is installed

      - name: Get current version from setup.py
        id: get_version
        run: |
          CURRENT_VERSION=$(python -c "import re; print(re.search(r'version=[\'\"]([^\'\"]+)[\'\"]', open('setup.py').read()).group(1))")
          echo "Current version is $CURRENT_VERSION"
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Bump version
        id: bump_version
        run: |
          VERSION_TYPE=${{ github.event.inputs.version_type }}
          IFS='.' read -r -a version_parts <<< "${{ env.CURRENT_VERSION }}"
          major=${version_parts[0]}
          minor=${version_parts[1]}
          patch=${version_parts[2]}
          if [[ "$VERSION_TYPE" == "patch" ]]; then
            patch=$((patch + 1))
          elif [[ "$VERSION_TYPE" == "minor" ]]; then
            minor=$((minor + 1))
            patch=0
          elif [[ "$VERSION_TYPE" == "major" ]]; then
            major=$((major + 1))
            minor=0
            patch=0
          else
            echo "Invalid version type!"
            exit 1
          fi
          NEW_VERSION="$major.$minor.$patch"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "Bumping version to $NEW_VERSION"

      - name: Update setup.py with new version
        run: |
          python -c "import re, os; content = open('setup.py').read(); new_version = os.getenv('NEW_VERSION'); updated_content = re.sub(r'version=[\'\"]([^\'\"]+)[\'\"]', f\"version='{new_version}'\", content); open('setup.py', 'w').write(updated_content)"
          echo "Updated setup.py to version ${{ env.NEW_VERSION }}"

      - name: Commit and push new version
        run: |
          git add setup.py
          git commit -m "Bump version to ${{ env.NEW_VERSION }}" || echo "No changes to commit"
          git push origin main

      - name: Push changes and create tag
        run: |
          git tag -a "v${{ env.NEW_VERSION }}" -m "Release ${{ env.NEW_VERSION }}"
          git push origin "v${{ env.NEW_VERSION }}"

      - name: Build and publish to PyPI
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          python setup.py sdist bdist_wheel  # Build source distribution and wheel
          twine upload dist/*                # Upload to PyPI
